import jp.sadashi.manager.password.Deps

plugins {
    id "com.android.application"
    id "kotlin-android"
    id "kotlin-parcelize"
    id "com.github.ben-manes.versions"
    id "androidx.navigation.safeargs"
    id "de.mannodermaus.android-junit5"
}

android {
    compileSdkVersion Deps.Versions.compileSdk

    defaultConfig {
        applicationId "jp.sadashi.manager.password"
        minSdkVersion Deps.Versions.minSdk
        targetSdkVersion Deps.Versions.compileSdk
        versionCode 1
        versionName "0.0.1"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = "11.0"
    }

    testOptions {
        junitPlatform {
            filters {
                includeEngines("spek2")
            }
            jacocoOptions {
                html.enabled = true
                xml.enabled = true
                csv.enabled = false
//                excludedClasses.addAll(
//                        listOf(
//                                "**/utility/*.class",
//                                "**/utility/*.class"
//                        )
//                )
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation Deps.Library.kotlin
    implementation Deps.Library.appcompat
    implementation Deps.Library.core
    implementation Deps.Library.material
    implementation Deps.Library.constraintLayout
    implementation Deps.Library.navigationFragment
    implementation Deps.Library.navigationUi

    testImplementation Deps.Test.kotlin
    testImplementation Deps.Test.mockK
    testImplementation Deps.Test.Spek.dsl
    testImplementation Deps.Test.Spek.runn1er
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}
